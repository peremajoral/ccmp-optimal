version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"     # Main app port (development)
      - "4321:4321"     # Astro dev server
      - "5173:5173"     # Vite dev server (alternative)
      - "24678:24678"   # Vite HMR
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.astro
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
      - HOST=0.0.0.0
      - PORT=3000
      - DATABASE_URL=postgresql://appuser:devpassword@db:5432/appdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"     # Direct access for development tools
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=devpassword
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"     # Direct access for development tools
    volumes:
      - redis_dev_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Optional: Database admin interface for development
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=dracula
    depends_on:
      - db
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - admin

  # Optional: Redis admin interface for development
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - admin

  # Optional: MailHog for email testing in development
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"     # SMTP
      - "8025:8025"     # Web UI
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - mail

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Development profiles usage:
# docker-compose -f docker-compose.dev.yml up -d                    # Core services only
# docker-compose -f docker-compose.dev.yml --profile admin up -d    # With admin interfaces
# docker-compose -f docker-compose.dev.yml --profile mail up -d     # With mail testing